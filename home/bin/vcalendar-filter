#!/usr/bin/perl

# vcalendar-filter is a simple filter to give plain text representations of vcards
# Copyright (C) 2008  Martyn Smith
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script takes a simple VCALENDAR file as input on STDIN and produces a
# human readable text/plain representation of it on STDOUT
#
# It has been designed for use with mutt's auto_view config option, see the
# README file for more details

use strict;
use warnings;

use Data::ICal;
use DateTime::TimeZone;
use DateTime::Format::ICal;
use DateTime::TimeZone::ICal;

use Text::Autoformat;
use Term::ANSIColor;

my $body = eval { local $/ = undef; <> };
my $calendar = Data::ICal->new(data => $body);

# If parsing failed, try parsing as version 1.0
$calendar = Data::ICal->new(data => $body, vcal10 => 1) unless $calendar;

# If parsing failed, give up :-(
unless ( $calendar ) {
    print "Unable to parse vcalendar: ", $calendar->error_message, "\n";
    print $body;
    exit 1;
}

# Generate a table of time zones, and a list of all calendar events.
my (%tz, @events);
for my $entry (@{$calendar->entries})
{
  my $entry_type = $entry->ical_entry_type;

  if ($entry_type eq 'VTIMEZONE')
  {
    my $dtz = DateTime::TimeZone::ICal->from_ical_entry($entry);
    $tz{$dtz->name} = $dtz;
  }
  elsif ($entry_type eq 'VEVENT')
  {
    push @events, $entry;
  }
  else
  {
    print "WARNING: Unknown entry type: ", $entry_type, "\n";
  }
}

my $local_tz = DateTime::TimeZone->new( name => 'local' )->name();

my $DASH_LINE = "\n" . ('-' x 72) . "\n\n";

foreach my $entry ( @events )
{
  print $DASH_LINE;

  foreach my $prop_name ( qw(summary
                             BR
                             description
                             BR
                             location
                             organizer
                             dtstart
                             dtend) )
  {
    # Handle blank line.
    if ( $prop_name eq 'BR' ) {
      print "\n";
      next;
    }

    # Now process each property.  Each property can actually have an array
    # of values.
    foreach my $property (@{$entry->property ($prop_name)})
    {
      # TODO: This color call doesn't seem to work when viewing entries in
      # mutt.
      print color ('red');
      printf "%-12s: ", ucfirst $prop_name;
      print color ('reset');

      if ($prop_name eq 'description')
      {
        my $text = autoformat $property->decoded_value (), {
          all => 1,
          left => 15,
        };
        $text =~ s/^\s*// if defined ($text);
        print $text;
      }
      elsif ($prop_name eq 'dtstart' || $prop_name eq 'dtend')
      {
        # Get the time zone key from the property parameters.
        my $tzid = $property->parameters->{TZID};

        # Convert the date in the ordinary fashion.
        my $dt = DateTime::Format::ICal->parse_datetime($property->value);

        # First Set the timezone to that of the event, and then change it
        # to the local timezone.  This will update the event to reflect the
        # actual local time.
        $dt->set_time_zone($tz{$tzid}) if $tzid and $tz{$tzid};
        my $str = $dt->datetime (' ');
        $str .= "\t($tzid)" if ($tzid);

        $dt->set_time_zone($local_tz);
        print $dt->datetime (' ')."\t($local_tz)";

        if ($tzid and ($local_tz ne $tzid))
        {
          print "\n".(' 'x14)."[ ".$str." ]";
        }
      }
      else
      {
        # These are generally short string properties.
        printf $property->decoded_value ();
      }
      print "\n";
    }
  }
}

print $DASH_LINE;
