#!/usr/bin/perl

use warnings;
use strict;

#========================================================================#

=pod

=head1 NAME

remove-changelog-from-patch - Remove ChangeLog blocks from a patch file.

=head1 OPTIONS

B<remove-changelog-from-patch> [-h|--help] FILE.patch ....

=head1 SYNOPSIS

When submitting patches to GNU projects, the changes to ChangeLog files
should not be included in the patch sent to the mailing list.

This script takes a list of patch files and updates each patch file in
place, removing all ChangeLog patch blocks.

=cut

#========================================================================#

use lib "$ENV{HOME}/lib";
use GiveHelp qw/usage/;         # Allow -h or --help command line options.
use boolean;
use File::Temp qw/tempfile/;
use File::Copy;
use Cwd qw/abs_path/;
use File::Basename;

#========================================================================#

foreach my $filename (@ARGV)
{
  if (not (-r $filename))
  {
    print "Unable to read `$filename', skipping...\n";
  }

  print "Stripping ChangeLog differences from `$filename'...\n";

  strip_changelog_from ($filename);
}

exit (0);

#========================================================================#

=pod

=head1 METHODS

The following methods are defined in this script.

=over 4

=cut

#========================================================================#

=pod

=item B<filter_out_changelog>

Takes two parameters, both open file handles.  The first is the input
stream, the second is the output stream.

Content is read from the input, and written to the output, except for
content that looks like a diff block from a patch, that applies to a
ChangeLog file.

=cut

sub filter_out_changelog {
  my ($in, $out) = @_;

  my $in_changelog = false;
  while (<$in>)
  {
    if (m#^diff --git a.*/ChangeLog(?:\.\S+)? b.*/ChangeLog(?:\.\S+)?$#)
    {
      $in_changelog = true;
    }
    elsif (m#diff --git #)
    {
      $in_changelog = false;
    }

    next if ($in_changelog);
    print $out $_;
  }
}

#========================================================================#

=pod

=item B<strip_changelog_from>

Take a filename as a parameter.  Filters out the ChangeLog entries from the
file, and updates the file in place.

=cut

sub strip_changelog_from {
  my $filename = shift;

  my $dir = dirname (abs_path ($filename));
  open my $in, $filename
    or die "Failed to open `$filename': $!";

  my ($out, $tempfilename) = tempfile (DIR => $dir);
  filter_out_changelog ($in, $out);

  close $out
    or die "Failed to close `$tempfilename': $!";

  close $in
    or die "Failed to close `$filename': $!";

  move ($tempfilename, $filename)
    or die "Failed to move `$tempfilename' to `$filename'";
}

#========================================================================#

=pod

=back

=head1 AUTHOR

Andrew Burgess, 30 Mar 2016

=cut
