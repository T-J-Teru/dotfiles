#! /bin/bash

rofibin=rofi

# Where we cache the list of projects.
PROJECT_LIST_FILE=~/.toggl-project-list

# Update the toggl project list file.
function update_toggl_projects ()
{
    TMP_DIR=/tmp
    TMP_FILE_1=$(mktemp --tmpdir=${TMP_DIR} toggl_XXXXXX)
    TMP_FILE_2=$(mktemp --tmpdir=${TMP_DIR} toggl_XXXXXX)

    toggl projects ls > ${TMP_FILE_1} 2>/dev/null
    if [ $? != 0 ]; then
        rm -f ${TMP_FILE_1}
        return 1
    fi

    (cat ${TMP_FILE_1} | tail -n +2 | awk '{ print $1 }') \
        >${TMP_FILE_2} 2>/dev/null
    rm -f ${TMP_FILE_1}
    mv -f ${TMP_FILE_2} ${PROJECT_LIST_FILE}
    return 0
}

# Get the list of all projects, including the special "nothing"
# project, which is always printed first in the list.
function get_project_list ()
{
    if [ ! -e ${PROJECT_LIST_FILE} ]; then
        update_toggl_projects
    fi

    if [ ! -e ${PROJECT_LIST_FILE} ]; then
        return 1
    fi

    echo "nothing"
    cat ${PROJECT_LIST_FILE}
    return 0
}

# Allow the user to select the project to switch too.
project=$(get_project_list \
              | ${rofibin} -p "project: " -no-custom -dmenu -i -theme arthur)

# Start an update of the project list in the background.
update_toggl_projects &

# No task name selected, means don't change anything.
if [ -z "${project}" ]
then
    exit 0
fi

# Stop working on the current project, and start working on the newly
# selected one.
toggl stop &> /dev/null
if [ "${project}" != "nothing" ]
then
    toggl start -o ${project} "" &>/dev/null
fi

# This wakes up i3 status, and should cause it to refresh the toggl
# task being displayed.
killall -USR1 py3status
killall -USR1 i3status
